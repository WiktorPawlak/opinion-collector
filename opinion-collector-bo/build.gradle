plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'pl.io'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "17"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator' //exposes endpoint in "Services" tab
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.liquibase:liquibase-core' liquibase must be configured in classpath/db
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12' //swagger
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools' //hotswap code during development
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_17

/*task insertProducts() {
    doLast {
        def productService = new ProductFacade() // assuming this is a service class that handles inserting products

        for (int i = 0; i < 100; i++) {
            Product product = new Product()
            product.setTitle("Product " + i)
            product.setCategoryId(1) // set some default category
            product.setImage(new byte[0])
            product.setOrigin(ProductOrigin.LOCAL)
            product.setVisibility(true)
            product.setEan("1234567890")

            productService.insertProduct(product)
        }
    }
}*/





